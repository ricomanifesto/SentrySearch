#!/usr/bin/env python3
"""
Import SentrySearch traces to the Annotator tool

This script helps import trace files generated by SentrySearch into the
SentrySearch-Annotator tool for review and annotation.
"""

import argparse
import subprocess
import sys
from pathlib import Path
import json


def check_annotator_exists(annotator_path: Path) -> bool:
    """Check if the annotator tool exists at the specified path"""
    return annotator_path.exists() and (annotator_path / "backend").exists()


def import_traces(traces_dir: Path, annotator_path: Path, init_db: bool = False) -> bool:
    """Import traces using the annotator's import script
    
    Args:
        traces_dir: Path to SentrySearch traces directory
        annotator_path: Path to SentrySearch-Annotator directory
        init_db: Whether to initialize the database first
        
    Returns:
        True if import successful, False otherwise
    """
    import_script = annotator_path / "backend" / "scripts" / "import_traces.py"
    
    if not import_script.exists():
        print(f"ERROR: Import script not found at {import_script}")
        return False
    
    # Build command
    cmd = ["python", str(import_script), "--source", str(traces_dir)]
    
    if init_db:
        cmd.append("--init-db")
    
    print(f"Running: {' '.join(cmd)}")
    
    try:
        # Change to the backend directory
        result = subprocess.run(
            cmd, 
            cwd=annotator_path / "backend",
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            print("SUCCESS: Traces imported successfully")
            print(result.stdout)
            return True
        else:
            print("ERROR: Import failed")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"ERROR: Failed to run import script: {e}")
        return False


def validate_traces(traces_dir: Path) -> tuple:
    """Validate trace files before import
    
    Returns:
        (valid_count, total_count, errors)
    """
    trace_files = list(traces_dir.glob("*.json"))
    valid_count = 0
    errors = []
    
    for trace_file in trace_files:
        try:
            with open(trace_file, 'r') as f:
                data = json.load(f)
            
            # Basic validation
            required_fields = ["trace_id", "timestamp", "tool_name"]
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                errors.append(f"{trace_file.name}: Missing fields {missing_fields}")
            else:
                valid_count += 1
                
        except json.JSONDecodeError as e:
            errors.append(f"{trace_file.name}: Invalid JSON - {e}")
        except Exception as e:
            errors.append(f"{trace_file.name}: Error - {e}")
    
    return valid_count, len(trace_files), errors


def main():
    parser = argparse.ArgumentParser(description="Import SentrySearch traces to Annotator tool")
    parser.add_argument(
        "--traces-dir", 
        default="./traces",
        help="Directory containing SentrySearch trace files (default: ./traces)"
    )
    parser.add_argument(
        "--annotator-path",
        default="../SentrySearch-Annotator",
        help="Path to SentrySearch-Annotator directory (default: ../SentrySearch-Annotator)"
    )
    parser.add_argument(
        "--init-db",
        action="store_true",
        help="Initialize the annotator database before import"
    )
    parser.add_argument(
        "--validate-only",
        action="store_true",
        help="Only validate trace files, don't import"
    )
    
    args = parser.parse_args()
    
    # Convert to Path objects
    traces_dir = Path(args.traces_dir).resolve()
    annotator_path = Path(args.annotator_path).resolve()
    
    print(f"SentrySearch Trace Importer")
    print(f"===========================")
    print(f"Traces directory: {traces_dir}")
    print(f"Annotator path: {annotator_path}")
    print()
    
    # Check if traces directory exists
    if not traces_dir.exists():
        print(f"ERROR: Traces directory does not exist: {traces_dir}")
        sys.exit(1)
    
    # Check if annotator exists
    if not check_annotator_exists(annotator_path):
        print(f"ERROR: SentrySearch-Annotator not found at: {annotator_path}")
        print("Please ensure the annotator tool is installed and the path is correct.")
        sys.exit(1)
    
    # Validate trace files
    print("Validating trace files...")
    valid_count, total_count, errors = validate_traces(traces_dir)
    
    print(f"Found {total_count} trace files, {valid_count} valid")
    
    if errors:
        print("\nValidation errors:")
        for error in errors:
            print(f"  - {error}")
    
    if valid_count == 0:
        print("ERROR: No valid trace files found")
        sys.exit(1)
    
    if args.validate_only:
        print("Validation complete (validate-only mode)")
        sys.exit(0)
    
    # Import traces
    print(f"\nImporting {valid_count} valid traces...")
    success = import_traces(traces_dir, annotator_path, args.init_db)
    
    if success:
        print("\n✅ Import completed successfully!")
        print(f"\nTo review traces in the annotator:")
        print(f"1. Start the backend: cd {annotator_path}/backend && uvicorn main:app --reload")
        print(f"2. Start the frontend: cd {annotator_path}/frontend && npm run dev")
        print(f"3. Open http://localhost:3000 in your browser")
    else:
        print("\n❌ Import failed!")
        sys.exit(1)


if __name__ == "__main__":
    main()